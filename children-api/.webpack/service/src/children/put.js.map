{"version":3,"file":"src/children/put.js","mappings":"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","sources":["webpack://children-api/./src/children/kid.ts","webpack://children-api/./src/libs/baseError.ts","webpack://children-api/./src/libs/dynamodb.ts","webpack://children-api/./src/libs/repository.ts","webpack://children-api/./src/libs/util.ts","webpack://children-api/external commonjs \"@aws-sdk/client-dynamodb\"","webpack://children-api/external commonjs \"@aws-sdk/lib-dynamodb\"","webpack://children-api/external commonjs \"uuid\"","webpack://children-api/external commonjs \"zod\"","webpack://children-api/webpack/bootstrap","webpack://children-api/./src/children/put.ts"],"sourcesContent":["import { z } from 'zod'\n\nexport const kidSchema = z.object({\n  KidName: z\n    .string({\n      required_error: 'Name is required',\n      invalid_type_error: 'Name must be a string',\n    })\n    .min(3, { message: 'Must be 3 or more characters long' }),\n  KidSurname: z.string(),\n  BirthDate: z.string(),\n  Address: z.string(),\n})\n\n// extract the inferred type\nexport type KidType = z.infer<typeof kidSchema>\n","export enum HttpStatusCode {\n    OK = 200,\n    BAD_REQUEST = 400,\n    NOT_FOUND = 404,\n    INTERNAL_SERVER = 500,\n}\n\nclass BaseError extends Error {\n    public readonly name: string;\n    public readonly httpCode: HttpStatusCode;\n    public readonly isOperational: boolean;\n    \n    constructor(name: string, httpCode: HttpStatusCode, description: string, isOperational: boolean) {\n      super(description);\n      Object.setPrototypeOf(this, new.target.prototype);\n    \n      this.name = name;\n      this.httpCode = httpCode;\n      this.isOperational = isOperational;\n    \n      Error.captureStackTrace(this);\n    }\n}\n\n\n//free to extend the BaseError\nexport class APIError extends BaseError {\n    constructor(name: string, httpCode = HttpStatusCode.INTERNAL_SERVER, description = 'internal server error', isOperational = true) {\n        super(name, httpCode, description, isOperational);\n    }\n}\n\n// class HTTP400Error extends BaseError {\n//     constructor(description = 'bad request') {\n//         super('NOT FOUND', HttpStatusCode.BAD_REQUEST, description, true);\n//     }\n// }\n","import { DynamoDBDocumentClient, TranslateConfig } from '@aws-sdk/lib-dynamodb'\nimport { DynamoDBClient } from '@aws-sdk/client-dynamodb'\n\nconst REGION = 'eu-west-2'\n\nfunction getDynamoDBClient(): DynamoDBClient {\n  if (process.env.IS_OFFLINE) {\n    console.info('Setting the configuration to use the localhost database')\n    return new DynamoDBClient({\n      region: 'localhost',\n      endpoint: 'http://localhost:5001',\n    })\n  }\n  console.info('Setting the configuration to use the AWS database')\n  return new DynamoDBClient({ region: REGION })\n}\n\nexport const ddbClient: DynamoDBClient = getDynamoDBClient()\n// export const ddbClient: DynamoDBClient = new DynamoDBClient({ region: REGION })\n\nconst marshallOptions = {\n  // Whether to automatically convert empty strings, blobs, and sets to `null`.\n  convertEmptyValues: false,\n  // Whether to remove undefined values while marshalling.\n  removeUndefinedValues: false,\n  // Whether to convert typeof object to map attribute.\n  convertClassInstanceToMap: true,\n}\n\nconst unmarshallOptions = {\n  // Whether to return numbers as a string instead of converting them to native JavaScript numbers.\n  wrapNumbers: false,\n}\n\nconst translateConfig: TranslateConfig = { marshallOptions, unmarshallOptions }\n\nexport const ddbDocClient = DynamoDBDocumentClient.from(\n  ddbClient,\n  translateConfig\n)\n","import { DeleteCommand, GetCommand, PutCommand, ScanCommand } from \"@aws-sdk/lib-dynamodb\";\nimport { v4 as uuidv4 } from 'uuid'\nimport { APIError, HttpStatusCode } from \"./baseError\";\nimport { ddbDocClient } from \"./dynamodb\";\n\nexport async function getAllChildren(): Promise<Record<string, unknown>[]> {\n    const { Items } = await ddbDocClient.send(\n        new ScanCommand({\n            TableName: 'children-api-dev',\n            ConsistentRead: true,\n        })\n    )\n\n    if (Items === undefined) {\n        return []\n    } else {\n        return Items\n    }\n}\n\nexport async function getChildrenById(id: string): Promise<Record<string, unknown>> {\n    const { Item } = await ddbDocClient.send(\n      new GetCommand({\n        TableName: 'children-api-dev',\n        Key: { KidId: id },\n      })\n    )\n    \n    if (Item == undefined) {\n      throw new APIError(\n        'NOT FOUND',\n        HttpStatusCode.NOT_FOUND,\n        `Item with id ${id} not found`,\n        true\n      );\n    }\n\n    return Item;\n}\n\nexport async function deleteChildrenById(id: string): Promise<void> {\n  await getChildrenById(id)\n\n  await ddbDocClient.send(\n    new DeleteCommand({\n      TableName: 'children-api-dev',\n      Key: {\n        KidId: id,\n      },\n    })\n  )\n}\n\nexport async function saveChildren(item: Record<string, unknown>): Promise<void> {\n    await ddbDocClient.send(\n        new PutCommand({\n          TableName: 'children-api-dev',\n          Item: {\n            ...item,\n            KidId: uuidv4(),\n          },\n        })\n    )\n}\n","import { APIGatewayProxyResult } from 'aws-lambda'\n\nexport const formatJSONResponse = (\n  response: Record<string, unknown>,\n  statusCode = 200,\n  headers: Record<string, string> = { 'Content-Type': 'application/json' }): APIGatewayProxyResult => {\n  return {\n    statusCode,\n    body: JSON.stringify(response),\n    headers,\n  }\n}\n","module.exports = require(\"@aws-sdk/client-dynamodb\");","module.exports = require(\"@aws-sdk/lib-dynamodb\");","module.exports = require(\"uuid\");","module.exports = require(\"zod\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { APIGatewayProxyResult, APIGatewayProxyEvent } from 'aws-lambda'\nimport { ZodError } from 'zod'\n\nimport { formatJSONResponse } from '@libs/util'\nimport { kidSchema } from './kid'\nimport { saveChildren } from '@libs/repository'\n\nconst put = async (\n  event: APIGatewayProxyEvent\n): Promise<APIGatewayProxyResult> => {\n  if (event.body) {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const item = kidSchema.parse(JSON.parse(event.body!))\n      await saveChildren(item)\n      console.info('Success - item added or updated')\n      return formatJSONResponse({ kid: item }, 201)\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (err: any) {\n      if (err instanceof ZodError) {\n        return formatJSONResponse({ message: 'Error in the request body' }, 400)\n      }\n      return formatJSONResponse({ message: err.message }, 500)\n    }\n\n  } else {\n    return formatJSONResponse({ message: 'The body cannot be empty' }, 400)\n  }\n}\n\nexport const handler = async (\n  event: APIGatewayProxyEvent\n): Promise<APIGatewayProxyResult> => put(event)\n"],"names":[],"sourceRoot":""}