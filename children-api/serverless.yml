service: 'children-api'

frameworkVersion: '3'

# Serverless plugins
plugins:
  - serverless-esbuild
  # - serverless-offline     # this plugin enables us to run our application and Lambda functions locally
  # - serverless-dynamodb-local
  - serverless-dotenv-plugin    #Â to enable us load .env variables into our Lambda environment
  - serverless-plugin-typescript
  - serverless-plugin-canary-deployments

# Cloud provider
provider: 
  name: 'aws'
  runtime: 'nodejs18.x'
  region: ${env:REGION, 'eu-west-2'}
  stage: dev
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
          # arn:aws:dynamodb:eu-west-2:634692860368:table/NurseryChildren

package: 
  individually: true

# Serverless functions
functions: 
  getChildren: 
    handler: src/children/get.handler
    description: 'Information about the nursery children'
    events:
      - httpApi:
          path: /children
          method: get
  getChildrenById: 
    handler: src/children/getById.handler
    description: 'Information about a specific nursery kid'
    events:
      - httpApi:
          path: /children/{id}
          method: get
  createChildren:
    handler: src/children/put.handler
    description: 'Insert a new nursery kid'
    events:
      - httpApi:
          path: /children
          method: put
  deleteChildren:
    handler: src/children/deleteById.handler
    description: 'Delete a nursery kid'
    events:
      - httpApi:
          path: /children/{id}
          method: delete
  meals: 
    handler: src/meals/eat.handler
    description: 'Information about the nursery meals'
    events:
      - httpApi:
          path: /meals
          method: get    

  # preHook:
  #   handler: hooks.pre
  postHook:
    handler: src/test-hook/index.testHook  

custom:
  deploymentSettings:
    alias: Dev  # name that will be used to create the Lambda function alias
    type: Canary10Percent10Minutes
    # preTrafficHook: preHook   # validation Lambda function that runs before traffic shifting. It must use the CodeDeploy SDK to notify about this step's success or failure
    postTrafficHook: postHook  #  validation Lambda function that runs after traffic shifting. It must use the CodeDeploy SDK to notify about this step's success or failure
    # alarms:  #  list of CloudWatch alarms. If any of them is triggered during the deployment, the associated Lambda function will automatically roll back to the previous version
    #   - FooAlarm          # When a string is provided, it expects the alarm Logical ID
    #   - name: BarAlarm    # When an object is provided, it expects the alarm name in the name property
    stages: 
      - dev
      - pro 

  esbuild: 
    bundle: true
    minify: false
    sourcemap: true
    exclude: ['aws-sdk']
    target: 'node16'
    define: { 'require.resolve': undefined }
    platform: 'node'
    concurrency: 10
  # serverless-offline:
  #   httpPort: 3003
  # dynamodb:
  #   start:
  #     port: 5001
  #     inMemory: true
  #     migrate: true
  #   stages:
  #     - dev


# Resources your functions use
resources: # CloudFormation template syntax from here on.
  # Resources:
  #   childrenTable:
  #     Type: AWS::DynamoDB::Table
  #     DeletionPolicy: Retain
  #     Properties:
  #       TableName: "${self:provider.environment.DYNAMODB_TABLE}"
  #       AttributeDefinitions:
  #         - AttributeName: KidId
  #           AttributeType: S
  #       KeySchema:
  #         - AttributeName: KidId
  #           KeyType: HASH
  #       ProvisionedThroughput:
  #         ReadCapacityUnits: 1
  #         WriteCapacityUnits: 1

