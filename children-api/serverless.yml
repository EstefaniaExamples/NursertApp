service: 'children-api'

frameworkVersion: '3'

# Cloud provider
provider: 
  name: 'aws'
  runtime: 'nodejs16.x'
  region: eu-west-2
  stage: dev
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
          # arn:aws:dynamodb:eu-west-2:634692860368:table/NurseryChildren

# Serverless functions
functions: 
  getChildren: 
    handler: src/children/get.handler
    description: 'Information about the nursery children'
    events:
      - httpApi:
          path: /children
          method: get
  getChildrenById: 
    handler: src/children/getById.handler
    description: 'Information about a specific nursery kid'
    events:
      - httpApi:
          path: /children/{id}
          method: get
  createChildren:
    handler: src/children/put.handler
    description: 'Insert a new nursery kid'
    events:
      - httpApi:
          path: /children
          method: put
  meals: 
    handler: src/meals/eat.handler
    description: 'Information about the nursery meals'
    events:
      - httpApi:
          path: /meals
          method: get      

# Serverless plugins
plugins:
  - serverless-offline
  - serverless-plugin-typescript
  # - serverless-dynamodb-local

custom:
  # webpack:
  #   webpackConfig: ./webpack.config.js
  #   includeModules: true
  serverless-offline:
    httpPort: 3003
  dynamodb:
    start:
      port: 5000
      inMemory: true
      migrate: true
    stages:
      - dev

# Resources your functions use
resources: 

