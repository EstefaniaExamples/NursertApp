{
  "version": 3,
  "sources": ["../../../../src/meals/eat.ts", "../../../../src/util.ts"],
  "sourcesContent": ["import { APIGatewayProxyResult, APIGatewayProxyEvent } from 'aws-lambda'\n\nimport { simpleHttpResponse } from '../util'\n\nconst eat = async (\n  event: APIGatewayProxyEvent\n): Promise<APIGatewayProxyResult> => {\n  console.log('INFO: Starting meals handler')\n  return simpleHttpResponse(\n    {\n      message: 'Welcome to the meals function',\n      input: event,\n    },\n    200\n  )\n}\n\nexport const handler = async (\n  event: APIGatewayProxyEvent\n): Promise<APIGatewayProxyResult> =>\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  eat(event).catch((err: any) =>\n    simpleHttpResponse(\n      {\n        error: 'An error has occurred',\n        message: err.message,\n      },\n      500\n    )\n  )\n", "import { APIGatewayProxyResult } from 'aws-lambda'\n\n// This is one of those Typescript things where you want to avoid using it as\n//  much as possible, like `any` however it is super useful from time to time, it\n//  essentially represents something JSON-ish...\n// Look through \"that other project\" and see how many times `PlainObject` is\n//  used and imagine what it's like to desperately try to tell what bloody\n//  fields an object should have...\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type Pojo = { [key: string]: any }\n\nexport const simpleHttpResponse = (\n  body: Pojo,\n  status = 200,\n  headers: { [key: string]: string } = { 'Content-Type': 'application/json' }\n): APIGatewayProxyResult =>\n  // I'm only mentioning this here as if you've not come across it, it can cause a\n  //  headache. If you want to return something from an arrow function without the\n  //  `return` keyword you can with:\n  //      () => 2\n  //   which is the same as:\n  //      () => { return 2; }\n  //  however, if you wish to return an object, well the parser sees the braces\n  //  and assumes they define a block, not an object, so you have to bracket\n  //  them, e.g.:\n  ({\n    statusCode: status,\n    body: JSON.stringify(body, null, 2),\n    headers,\n  })\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACYO,IAAM,qBAAqB,CAChC,MACA,SAAS,KACT,UAAqC,EAAE,gBAAgB,mBAAmB,OAWzE;AAAA,EACC,YAAY;AAAA,EACZ,MAAM,KAAK,UAAU,MAAM,MAAM,CAAC;AAAA,EAClC;AACF;;;AD1BF,IAAM,MAAM,OACV,UACmC;AACnC,UAAQ,IAAI,8BAA8B;AAC1C,SAAO;AAAA,IACL;AAAA,MACE,SAAS;AAAA,MACT,OAAO;AAAA,IACT;AAAA,IACA;AAAA,EACF;AACF;AAEO,IAAM,UAAU,OACrB,UAGA,IAAI,KAAK,EAAE;AAAA,EAAM,CAAC,QAChB;AAAA,IACE;AAAA,MACE,OAAO;AAAA,MACP,SAAS,IAAI;AAAA,IACf;AAAA,IACA;AAAA,EACF;AACF;",
  "names": []
}
